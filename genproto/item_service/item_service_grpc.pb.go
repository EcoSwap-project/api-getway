// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: item/item_service.proto

package item_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	EcoExchangeService_AddItem_FullMethodName                    = "/eco_exchange.EcoExchangeService/AddItem"
	EcoExchangeService_UpdateItem_FullMethodName                 = "/eco_exchange.EcoExchangeService/UpdateItem"
	EcoExchangeService_DeleteItem_FullMethodName                 = "/eco_exchange.EcoExchangeService/DeleteItem"
	EcoExchangeService_GetItems_FullMethodName                   = "/eco_exchange.EcoExchangeService/GetItems"
	EcoExchangeService_GetItem_FullMethodName                    = "/eco_exchange.EcoExchangeService/GetItem"
	EcoExchangeService_SearchItems_FullMethodName                = "/eco_exchange.EcoExchangeService/SearchItems"
	EcoExchangeService_CreateSwap_FullMethodName                 = "/eco_exchange.EcoExchangeService/CreateSwap"
	EcoExchangeService_UpdateSwapStatus_FullMethodName           = "/eco_exchange.EcoExchangeService/UpdateSwapStatus"
	EcoExchangeService_GetSwaps_FullMethodName                   = "/eco_exchange.EcoExchangeService/GetSwaps"
	EcoExchangeService_AddRecyclingCenter_FullMethodName         = "/eco_exchange.EcoExchangeService/AddRecyclingCenter"
	EcoExchangeService_GetRecyclingCenters_FullMethodName        = "/eco_exchange.EcoExchangeService/GetRecyclingCenters"
	EcoExchangeService_AddRecyclingSubmission_FullMethodName     = "/eco_exchange.EcoExchangeService/AddRecyclingSubmission"
	EcoExchangeService_AddUserRating_FullMethodName              = "/eco_exchange.EcoExchangeService/AddUserRating"
	EcoExchangeService_GetUserRatings_FullMethodName             = "/eco_exchange.EcoExchangeService/GetUserRatings"
	EcoExchangeService_AddItemCategory_FullMethodName            = "/eco_exchange.EcoExchangeService/AddItemCategory"
	EcoExchangeService_GetStatistics_FullMethodName              = "/eco_exchange.EcoExchangeService/GetStatistics"
	EcoExchangeService_GetUserActivity_FullMethodName            = "/eco_exchange.EcoExchangeService/GetUserActivity"
	EcoExchangeService_AddEcoChallenge_FullMethodName            = "/eco_exchange.EcoExchangeService/AddEcoChallenge"
	EcoExchangeService_ParticipateEcoChallenge_FullMethodName    = "/eco_exchange.EcoExchangeService/ParticipateEcoChallenge"
	EcoExchangeService_UpdateEcoChallengeProgress_FullMethodName = "/eco_exchange.EcoExchangeService/UpdateEcoChallengeProgress"
	EcoExchangeService_AddEcoTip_FullMethodName                  = "/eco_exchange.EcoExchangeService/AddEcoTip"
	EcoExchangeService_GetEcoTips_FullMethodName                 = "/eco_exchange.EcoExchangeService/GetEcoTips"
)

// EcoExchangeServiceClient is the client API for EcoExchangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Services
type EcoExchangeServiceClient interface {
	// Items
	AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*AddItemResponse, error)
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error)
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error)
	GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*GetItemsResponse, error)
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error)
	SearchItems(ctx context.Context, in *SearchItemsRequest, opts ...grpc.CallOption) (*SearchItemsResponse, error)
	// Swaps
	CreateSwap(ctx context.Context, in *CreateSwapRequest, opts ...grpc.CallOption) (*CreateSwapResponse, error)
	UpdateSwapStatus(ctx context.Context, in *UpdateSwapStatusRequest, opts ...grpc.CallOption) (*UpdateSwapStatusResponse, error)
	GetSwaps(ctx context.Context, in *GetSwapsRequest, opts ...grpc.CallOption) (*GetSwapsResponse, error)
	// Recycling Centers
	AddRecyclingCenter(ctx context.Context, in *AddRecyclingCenterRequest, opts ...grpc.CallOption) (*AddRecyclingCenterResponse, error)
	GetRecyclingCenters(ctx context.Context, in *GetRecyclingCentersRequest, opts ...grpc.CallOption) (*GetRecyclingCentersResponse, error)
	AddRecyclingSubmission(ctx context.Context, in *AddRecyclingSubmissionRequest, opts ...grpc.CallOption) (*AddRecyclingSubmissionResponse, error)
	// User Ratings
	AddUserRating(ctx context.Context, in *AddUserRatingRequest, opts ...grpc.CallOption) (*AddUserRatingResponse, error)
	GetUserRatings(ctx context.Context, in *GetUserRatingsRequest, opts ...grpc.CallOption) (*GetUserRatingsResponse, error)
	// Item Categories
	AddItemCategory(ctx context.Context, in *AddItemCategoryRequest, opts ...grpc.CallOption) (*AddItemCategoryResponse, error)
	// Statistics
	GetStatistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*GetStatisticsResponse, error)
	// User Activity
	GetUserActivity(ctx context.Context, in *GetUserActivityRequest, opts ...grpc.CallOption) (*GetUserActivityResponse, error)
	// Eco Challenges
	AddEcoChallenge(ctx context.Context, in *AddEcoChallengeRequest, opts ...grpc.CallOption) (*AddEcoChallengeResponse, error)
	ParticipateEcoChallenge(ctx context.Context, in *ParticipateEcoChallengeRequest, opts ...grpc.CallOption) (*ParticipateEcoChallengeResponse, error)
	UpdateEcoChallengeProgress(ctx context.Context, in *UpdateEcoChallengeProgressRequest, opts ...grpc.CallOption) (*UpdateEcoChallengeProgressResponse, error)
	// Eco Tips
	AddEcoTip(ctx context.Context, in *AddEcoTipRequest, opts ...grpc.CallOption) (*AddEcoTipResponse, error)
	GetEcoTips(ctx context.Context, in *GetEcoTipsRequest, opts ...grpc.CallOption) (*GetEcoTipsResponse, error)
}

type ecoExchangeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEcoExchangeServiceClient(cc grpc.ClientConnInterface) EcoExchangeServiceClient {
	return &ecoExchangeServiceClient{cc}
}

func (c *ecoExchangeServiceClient) AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*AddItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddItemResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_AddItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateItemResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_UpdateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteItemResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_DeleteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*GetItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemsResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_GetItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_GetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) SearchItems(ctx context.Context, in *SearchItemsRequest, opts ...grpc.CallOption) (*SearchItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchItemsResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_SearchItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) CreateSwap(ctx context.Context, in *CreateSwapRequest, opts ...grpc.CallOption) (*CreateSwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSwapResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_CreateSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) UpdateSwapStatus(ctx context.Context, in *UpdateSwapStatusRequest, opts ...grpc.CallOption) (*UpdateSwapStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSwapStatusResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_UpdateSwapStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) GetSwaps(ctx context.Context, in *GetSwapsRequest, opts ...grpc.CallOption) (*GetSwapsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSwapsResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_GetSwaps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) AddRecyclingCenter(ctx context.Context, in *AddRecyclingCenterRequest, opts ...grpc.CallOption) (*AddRecyclingCenterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRecyclingCenterResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_AddRecyclingCenter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) GetRecyclingCenters(ctx context.Context, in *GetRecyclingCentersRequest, opts ...grpc.CallOption) (*GetRecyclingCentersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecyclingCentersResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_GetRecyclingCenters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) AddRecyclingSubmission(ctx context.Context, in *AddRecyclingSubmissionRequest, opts ...grpc.CallOption) (*AddRecyclingSubmissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRecyclingSubmissionResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_AddRecyclingSubmission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) AddUserRating(ctx context.Context, in *AddUserRatingRequest, opts ...grpc.CallOption) (*AddUserRatingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserRatingResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_AddUserRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) GetUserRatings(ctx context.Context, in *GetUserRatingsRequest, opts ...grpc.CallOption) (*GetUserRatingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRatingsResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_GetUserRatings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) AddItemCategory(ctx context.Context, in *AddItemCategoryRequest, opts ...grpc.CallOption) (*AddItemCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddItemCategoryResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_AddItemCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) GetStatistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*GetStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatisticsResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_GetStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) GetUserActivity(ctx context.Context, in *GetUserActivityRequest, opts ...grpc.CallOption) (*GetUserActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserActivityResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_GetUserActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) AddEcoChallenge(ctx context.Context, in *AddEcoChallengeRequest, opts ...grpc.CallOption) (*AddEcoChallengeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddEcoChallengeResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_AddEcoChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) ParticipateEcoChallenge(ctx context.Context, in *ParticipateEcoChallengeRequest, opts ...grpc.CallOption) (*ParticipateEcoChallengeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParticipateEcoChallengeResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_ParticipateEcoChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) UpdateEcoChallengeProgress(ctx context.Context, in *UpdateEcoChallengeProgressRequest, opts ...grpc.CallOption) (*UpdateEcoChallengeProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEcoChallengeProgressResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_UpdateEcoChallengeProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) AddEcoTip(ctx context.Context, in *AddEcoTipRequest, opts ...grpc.CallOption) (*AddEcoTipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddEcoTipResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_AddEcoTip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoExchangeServiceClient) GetEcoTips(ctx context.Context, in *GetEcoTipsRequest, opts ...grpc.CallOption) (*GetEcoTipsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEcoTipsResponse)
	err := c.cc.Invoke(ctx, EcoExchangeService_GetEcoTips_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EcoExchangeServiceServer is the server API for EcoExchangeService service.
// All implementations must embed UnimplementedEcoExchangeServiceServer
// for forward compatibility
//
// Services
type EcoExchangeServiceServer interface {
	// Items
	AddItem(context.Context, *AddItemRequest) (*AddItemResponse, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error)
	DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error)
	GetItems(context.Context, *GetItemsRequest) (*GetItemsResponse, error)
	GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error)
	SearchItems(context.Context, *SearchItemsRequest) (*SearchItemsResponse, error)
	// Swaps
	CreateSwap(context.Context, *CreateSwapRequest) (*CreateSwapResponse, error)
	UpdateSwapStatus(context.Context, *UpdateSwapStatusRequest) (*UpdateSwapStatusResponse, error)
	GetSwaps(context.Context, *GetSwapsRequest) (*GetSwapsResponse, error)
	// Recycling Centers
	AddRecyclingCenter(context.Context, *AddRecyclingCenterRequest) (*AddRecyclingCenterResponse, error)
	GetRecyclingCenters(context.Context, *GetRecyclingCentersRequest) (*GetRecyclingCentersResponse, error)
	AddRecyclingSubmission(context.Context, *AddRecyclingSubmissionRequest) (*AddRecyclingSubmissionResponse, error)
	// User Ratings
	AddUserRating(context.Context, *AddUserRatingRequest) (*AddUserRatingResponse, error)
	GetUserRatings(context.Context, *GetUserRatingsRequest) (*GetUserRatingsResponse, error)
	// Item Categories
	AddItemCategory(context.Context, *AddItemCategoryRequest) (*AddItemCategoryResponse, error)
	// Statistics
	GetStatistics(context.Context, *GetStatisticsRequest) (*GetStatisticsResponse, error)
	// User Activity
	GetUserActivity(context.Context, *GetUserActivityRequest) (*GetUserActivityResponse, error)
	// Eco Challenges
	AddEcoChallenge(context.Context, *AddEcoChallengeRequest) (*AddEcoChallengeResponse, error)
	ParticipateEcoChallenge(context.Context, *ParticipateEcoChallengeRequest) (*ParticipateEcoChallengeResponse, error)
	UpdateEcoChallengeProgress(context.Context, *UpdateEcoChallengeProgressRequest) (*UpdateEcoChallengeProgressResponse, error)
	// Eco Tips
	AddEcoTip(context.Context, *AddEcoTipRequest) (*AddEcoTipResponse, error)
	GetEcoTips(context.Context, *GetEcoTipsRequest) (*GetEcoTipsResponse, error)
	mustEmbedUnimplementedEcoExchangeServiceServer()
}

// UnimplementedEcoExchangeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEcoExchangeServiceServer struct {
}

func (UnimplementedEcoExchangeServiceServer) AddItem(context.Context, *AddItemRequest) (*AddItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedEcoExchangeServiceServer) UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedEcoExchangeServiceServer) DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedEcoExchangeServiceServer) GetItems(context.Context, *GetItemsRequest) (*GetItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedEcoExchangeServiceServer) GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedEcoExchangeServiceServer) SearchItems(context.Context, *SearchItemsRequest) (*SearchItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchItems not implemented")
}
func (UnimplementedEcoExchangeServiceServer) CreateSwap(context.Context, *CreateSwapRequest) (*CreateSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSwap not implemented")
}
func (UnimplementedEcoExchangeServiceServer) UpdateSwapStatus(context.Context, *UpdateSwapStatusRequest) (*UpdateSwapStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSwapStatus not implemented")
}
func (UnimplementedEcoExchangeServiceServer) GetSwaps(context.Context, *GetSwapsRequest) (*GetSwapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwaps not implemented")
}
func (UnimplementedEcoExchangeServiceServer) AddRecyclingCenter(context.Context, *AddRecyclingCenterRequest) (*AddRecyclingCenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecyclingCenter not implemented")
}
func (UnimplementedEcoExchangeServiceServer) GetRecyclingCenters(context.Context, *GetRecyclingCentersRequest) (*GetRecyclingCentersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecyclingCenters not implemented")
}
func (UnimplementedEcoExchangeServiceServer) AddRecyclingSubmission(context.Context, *AddRecyclingSubmissionRequest) (*AddRecyclingSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecyclingSubmission not implemented")
}
func (UnimplementedEcoExchangeServiceServer) AddUserRating(context.Context, *AddUserRatingRequest) (*AddUserRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserRating not implemented")
}
func (UnimplementedEcoExchangeServiceServer) GetUserRatings(context.Context, *GetUserRatingsRequest) (*GetUserRatingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRatings not implemented")
}
func (UnimplementedEcoExchangeServiceServer) AddItemCategory(context.Context, *AddItemCategoryRequest) (*AddItemCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItemCategory not implemented")
}
func (UnimplementedEcoExchangeServiceServer) GetStatistics(context.Context, *GetStatisticsRequest) (*GetStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistics not implemented")
}
func (UnimplementedEcoExchangeServiceServer) GetUserActivity(context.Context, *GetUserActivityRequest) (*GetUserActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserActivity not implemented")
}
func (UnimplementedEcoExchangeServiceServer) AddEcoChallenge(context.Context, *AddEcoChallengeRequest) (*AddEcoChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEcoChallenge not implemented")
}
func (UnimplementedEcoExchangeServiceServer) ParticipateEcoChallenge(context.Context, *ParticipateEcoChallengeRequest) (*ParticipateEcoChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipateEcoChallenge not implemented")
}
func (UnimplementedEcoExchangeServiceServer) UpdateEcoChallengeProgress(context.Context, *UpdateEcoChallengeProgressRequest) (*UpdateEcoChallengeProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEcoChallengeProgress not implemented")
}
func (UnimplementedEcoExchangeServiceServer) AddEcoTip(context.Context, *AddEcoTipRequest) (*AddEcoTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEcoTip not implemented")
}
func (UnimplementedEcoExchangeServiceServer) GetEcoTips(context.Context, *GetEcoTipsRequest) (*GetEcoTipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEcoTips not implemented")
}
func (UnimplementedEcoExchangeServiceServer) mustEmbedUnimplementedEcoExchangeServiceServer() {}

// UnsafeEcoExchangeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EcoExchangeServiceServer will
// result in compilation errors.
type UnsafeEcoExchangeServiceServer interface {
	mustEmbedUnimplementedEcoExchangeServiceServer()
}

func RegisterEcoExchangeServiceServer(s grpc.ServiceRegistrar, srv EcoExchangeServiceServer) {
	s.RegisterService(&EcoExchangeService_ServiceDesc, srv)
}

func _EcoExchangeService_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_AddItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).AddItem(ctx, req.(*AddItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).DeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_GetItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).GetItems(ctx, req.(*GetItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_SearchItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).SearchItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_SearchItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).SearchItems(ctx, req.(*SearchItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_CreateSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).CreateSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_CreateSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).CreateSwap(ctx, req.(*CreateSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_UpdateSwapStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSwapStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).UpdateSwapStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_UpdateSwapStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).UpdateSwapStatus(ctx, req.(*UpdateSwapStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_GetSwaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).GetSwaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_GetSwaps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).GetSwaps(ctx, req.(*GetSwapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_AddRecyclingCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecyclingCenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).AddRecyclingCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_AddRecyclingCenter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).AddRecyclingCenter(ctx, req.(*AddRecyclingCenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_GetRecyclingCenters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecyclingCentersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).GetRecyclingCenters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_GetRecyclingCenters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).GetRecyclingCenters(ctx, req.(*GetRecyclingCentersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_AddRecyclingSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecyclingSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).AddRecyclingSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_AddRecyclingSubmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).AddRecyclingSubmission(ctx, req.(*AddRecyclingSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_AddUserRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).AddUserRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_AddUserRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).AddUserRating(ctx, req.(*AddUserRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_GetUserRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRatingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).GetUserRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_GetUserRatings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).GetUserRatings(ctx, req.(*GetUserRatingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_AddItemCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).AddItemCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_AddItemCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).AddItemCategory(ctx, req.(*AddItemCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_GetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).GetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_GetStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).GetStatistics(ctx, req.(*GetStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_GetUserActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).GetUserActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_GetUserActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).GetUserActivity(ctx, req.(*GetUserActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_AddEcoChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEcoChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).AddEcoChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_AddEcoChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).AddEcoChallenge(ctx, req.(*AddEcoChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_ParticipateEcoChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParticipateEcoChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).ParticipateEcoChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_ParticipateEcoChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).ParticipateEcoChallenge(ctx, req.(*ParticipateEcoChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_UpdateEcoChallengeProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEcoChallengeProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).UpdateEcoChallengeProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_UpdateEcoChallengeProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).UpdateEcoChallengeProgress(ctx, req.(*UpdateEcoChallengeProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_AddEcoTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEcoTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).AddEcoTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_AddEcoTip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).AddEcoTip(ctx, req.(*AddEcoTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoExchangeService_GetEcoTips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEcoTipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoExchangeServiceServer).GetEcoTips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcoExchangeService_GetEcoTips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoExchangeServiceServer).GetEcoTips(ctx, req.(*GetEcoTipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EcoExchangeService_ServiceDesc is the grpc.ServiceDesc for EcoExchangeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EcoExchangeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eco_exchange.EcoExchangeService",
	HandlerType: (*EcoExchangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddItem",
			Handler:    _EcoExchangeService_AddItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _EcoExchangeService_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _EcoExchangeService_DeleteItem_Handler,
		},
		{
			MethodName: "GetItems",
			Handler:    _EcoExchangeService_GetItems_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _EcoExchangeService_GetItem_Handler,
		},
		{
			MethodName: "SearchItems",
			Handler:    _EcoExchangeService_SearchItems_Handler,
		},
		{
			MethodName: "CreateSwap",
			Handler:    _EcoExchangeService_CreateSwap_Handler,
		},
		{
			MethodName: "UpdateSwapStatus",
			Handler:    _EcoExchangeService_UpdateSwapStatus_Handler,
		},
		{
			MethodName: "GetSwaps",
			Handler:    _EcoExchangeService_GetSwaps_Handler,
		},
		{
			MethodName: "AddRecyclingCenter",
			Handler:    _EcoExchangeService_AddRecyclingCenter_Handler,
		},
		{
			MethodName: "GetRecyclingCenters",
			Handler:    _EcoExchangeService_GetRecyclingCenters_Handler,
		},
		{
			MethodName: "AddRecyclingSubmission",
			Handler:    _EcoExchangeService_AddRecyclingSubmission_Handler,
		},
		{
			MethodName: "AddUserRating",
			Handler:    _EcoExchangeService_AddUserRating_Handler,
		},
		{
			MethodName: "GetUserRatings",
			Handler:    _EcoExchangeService_GetUserRatings_Handler,
		},
		{
			MethodName: "AddItemCategory",
			Handler:    _EcoExchangeService_AddItemCategory_Handler,
		},
		{
			MethodName: "GetStatistics",
			Handler:    _EcoExchangeService_GetStatistics_Handler,
		},
		{
			MethodName: "GetUserActivity",
			Handler:    _EcoExchangeService_GetUserActivity_Handler,
		},
		{
			MethodName: "AddEcoChallenge",
			Handler:    _EcoExchangeService_AddEcoChallenge_Handler,
		},
		{
			MethodName: "ParticipateEcoChallenge",
			Handler:    _EcoExchangeService_ParticipateEcoChallenge_Handler,
		},
		{
			MethodName: "UpdateEcoChallengeProgress",
			Handler:    _EcoExchangeService_UpdateEcoChallengeProgress_Handler,
		},
		{
			MethodName: "AddEcoTip",
			Handler:    _EcoExchangeService_AddEcoTip_Handler,
		},
		{
			MethodName: "GetEcoTips",
			Handler:    _EcoExchangeService_GetEcoTips_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "item/item_service.proto",
}
