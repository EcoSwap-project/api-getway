basePath: /
definitions:
  authentication_service.AddEcoPointsRequest:
    properties:
      points:
        type: integer
      reason:
        type: string
      user_id:
        type: string
    type: object
  authentication_service.AddEcoPointsResponse:
    properties:
      added_points:
        type: integer
      eco_points:
        type: integer
      reason:
        type: string
      timestamp:
        type: string
      user_id:
        type: string
    type: object
  authentication_service.EcoPointsHistoryItem:
    properties:
      id:
        type: string
      points:
        type: integer
      reason:
        type: string
      timestamp:
        type: string
    type: object
  authentication_service.EcoPointsHistoryResponse:
    properties:
      history:
        items:
          $ref: '#/definitions/authentication_service.EcoPointsHistoryItem'
        type: array
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  authentication_service.EcoPointsResponse:
    properties:
      eco_points:
        type: integer
      last_updated:
        type: string
      user_id:
        type: string
    type: object
  authentication_service.EditProfileRequest:
    properties:
      bio:
        type: string
      full_name:
        type: string
      id:
        type: string
    type: object
  authentication_service.EditProfileResponse:
    properties:
      bio:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  authentication_service.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  authentication_service.LoginResponse:
    properties:
      seccses:
        type: boolean
    type: object
  authentication_service.LogoutResponse:
    properties:
      message:
        type: string
    type: object
  authentication_service.ProfileResponse:
    properties:
      created_at:
        type: string
      eco_points:
        type: integer
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  authentication_service.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    type: object
  authentication_service.RefreshTokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  authentication_service.RegisterRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  authentication_service.RegisterResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  authentication_service.ResetPasswordRequest:
    properties:
      email:
        type: string
    type: object
  authentication_service.ResetPasswordResponse:
    properties:
      message:
        type: string
    type: object
  authentication_service.UsersListRequest:
    properties:
      eco_points:
        type: integer
      full_name:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  authentication_service.UsersListResponse:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/authentication_service.UsersListRequest'
        type: array
    type: object
  item_service.AddEcoChallengeRequest:
    properties:
      description:
        type: string
      end_date:
        type: string
      reward_points:
        type: integer
      start_date:
        type: string
      title:
        type: string
    type: object
  item_service.AddEcoChallengeResponse:
    properties:
      challenge:
        $ref: '#/definitions/item_service.EcoChallenge'
    type: object
  item_service.AddEcoTipRequest:
    properties:
      content:
        type: string
      title:
        type: string
    type: object
  item_service.AddEcoTipResponse:
    properties:
      tip:
        $ref: '#/definitions/item_service.EcoTip'
    type: object
  item_service.AddItemCategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  item_service.AddItemCategoryResponse:
    properties:
      category:
        $ref: '#/definitions/item_service.ItemCategory'
    type: object
  item_service.AddItemRequest:
    properties:
      category_id:
        type: string
      condition:
        type: string
      description:
        type: string
      images:
        items:
          type: string
        type: array
      name:
        type: string
      swap_preference:
        items:
          type: string
        type: array
    type: object
  item_service.AddItemResponse:
    properties:
      item:
        $ref: '#/definitions/item_service.Item'
    type: object
  item_service.AddRecyclingCenterRequest:
    properties:
      accepted_materials:
        items:
          type: string
        type: array
      address:
        type: string
      contact_number:
        type: string
      name:
        type: string
      working_hours:
        type: string
    type: object
  item_service.AddRecyclingCenterResponse:
    properties:
      center:
        $ref: '#/definitions/item_service.RecyclingCenter'
    type: object
  item_service.AddRecyclingSubmissionRequest:
    properties:
      center_id:
        type: string
      items:
        items:
          $ref: '#/definitions/item_service.SubmissionItem'
        type: array
      user_id:
        type: string
    type: object
  item_service.AddRecyclingSubmissionResponse:
    properties:
      submission:
        $ref: '#/definitions/item_service.RecyclingSubmission'
    type: object
  item_service.AddUserRatingRequest:
    properties:
      comment:
        type: string
      id:
        type: string
      rater_id:
        type: string
      rating:
        type: number
      swap_id:
        type: string
      user_id:
        type: string
    type: object
  item_service.AddUserRatingResponse:
    properties:
      rating:
        $ref: '#/definitions/item_service.Rating'
    type: object
  item_service.CreateSwapRequest:
    properties:
      id:
        type: string
      message:
        type: string
      offered_item_id:
        type: string
      owner_id:
        type: string
      requested_item_id:
        type: string
      requester_id:
        type: string
      status:
        type: string
    type: object
  item_service.CreateSwapResponse:
    properties:
      swap:
        $ref: '#/definitions/item_service.Swap'
    type: object
  item_service.DeleteItemRequest:
    properties:
      id:
        type: string
    type: object
  item_service.DeleteItemResponse:
    properties:
      message:
        type: string
    type: object
  item_service.EcoChallenge:
    properties:
      created_at:
        type: string
      description:
        type: string
      end_date:
        type: string
      id:
        type: string
      reward_points:
        type: integer
      start_date:
        type: string
      title:
        type: string
    type: object
  item_service.EcoTip:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      title:
        type: string
    type: object
  item_service.GetEcoTipsRequest:
    properties:
      limit:
        type: integer
      page:
        type: integer
    type: object
  item_service.GetEcoTipsResponse:
    properties:
      limit:
        type: integer
      page:
        type: integer
      tips:
        items:
          $ref: '#/definitions/item_service.EcoTip'
        type: array
      total:
        type: integer
    type: object
  item_service.GetItemRequest:
    properties:
      id:
        type: string
    type: object
  item_service.GetItemResponse:
    properties:
      item:
        $ref: '#/definitions/item_service.Item'
    type: object
  item_service.GetItemsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/item_service.Item'
        type: array
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  item_service.GetRecyclingCentersResponse:
    properties:
      centers:
        items:
          $ref: '#/definitions/item_service.RecyclingCenter'
        type: array
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  item_service.GetStatisticsResponse:
    properties:
      top_categories:
        items:
          $ref: '#/definitions/item_service.TopCategory'
        type: array
      top_recycling_centers:
        items:
          $ref: '#/definitions/item_service.TopRecyclingCenter'
        type: array
      total_eco_points_earned:
        type: integer
      total_recycled_items:
        type: integer
      total_swaps:
        type: integer
    type: object
  item_service.GetSwapsResponse:
    properties:
      limit:
        type: integer
      page:
        type: integer
      swaps:
        items:
          $ref: '#/definitions/item_service.Swap'
        type: array
      total:
        type: integer
    type: object
  item_service.GetUserActivityRequest:
    properties:
      end_date:
        type: string
      start_date:
        type: string
      user_id:
        type: string
    type: object
  item_service.GetUserActivityResponse:
    properties:
      eco_points_earned:
        type: integer
      items_listed:
        type: integer
      recycling_submissions:
        type: integer
      swaps_completed:
        type: integer
      swaps_initiated:
        type: integer
      user_id:
        type: string
    type: object
  item_service.GetUserRatingsRequest:
    properties:
      limit:
        type: integer
      page:
        type: integer
      user_id:
        type: string
    type: object
  item_service.GetUserRatingsResponse:
    properties:
      average_rating:
        type: number
      limit:
        type: integer
      page:
        type: integer
      ratings:
        items:
          $ref: '#/definitions/item_service.Rating'
        type: array
      total_ratings:
        type: integer
    type: object
  item_service.Item:
    properties:
      category_id:
        type: string
      condition:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      owner_id:
        type: string
      status:
        type: string
      swap_preference:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
  item_service.ItemCategory:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  item_service.ParticipateEcoChallengeRequest:
    properties:
      challenge_id:
        type: string
      status:
        type: string
      user_id:
        type: string
    type: object
  item_service.ParticipateEcoChallengeResponse:
    properties:
      challenge_id:
        type: string
      joined_at:
        type: string
      status:
        type: string
      user_id:
        type: string
    type: object
  item_service.Rating:
    properties:
      comment:
        type: string
      created_at:
        type: string
      id:
        type: string
      rater_id:
        type: string
      rating:
        type: number
      swap_id:
        type: string
      user_id:
        type: string
    type: object
  item_service.RecyclingCenter:
    properties:
      accepted_materials:
        items:
          type: string
        type: array
      address:
        type: string
      contact_number:
        type: string
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
      working_hours:
        type: string
    type: object
  item_service.RecyclingSubmission:
    properties:
      center_id:
        type: string
      created_at:
        type: string
      eco_points_earned:
        type: integer
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/item_service.SubmissionItem'
        type: array
      user_id:
        type: string
    type: object
  item_service.SearchItemsRequest:
    properties:
      category:
        type: string
      condition:
        type: string
      limit:
        type: integer
      page:
        type: integer
      query:
        type: string
    type: object
  item_service.SearchItemsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/item_service.Item'
        type: array
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  item_service.SubmissionItem:
    properties:
      item_id:
        type: string
      material:
        type: string
      weight:
        type: number
    type: object
  item_service.Swap:
    properties:
      created_at:
        type: string
      id:
        type: string
      message:
        type: string
      offered_item_id:
        type: string
      owner_id:
        type: string
      requested_item_id:
        type: string
      requester_id:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  item_service.TopCategory:
    properties:
      id:
        type: string
      name:
        type: string
      swap_count:
        type: integer
    type: object
  item_service.TopRecyclingCenter:
    properties:
      id:
        type: string
      name:
        type: string
      submissions_count:
        type: integer
    type: object
  item_service.UpdateEcoChallengeProgressRequest:
    properties:
      challenge_id:
        type: string
      recycled_items_count:
        type: integer
    type: object
  item_service.UpdateEcoChallengeProgressResponse:
    properties:
      challenge_id:
        type: string
      recycled_items_count:
        type: integer
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  item_service.UpdateItemRequest:
    properties:
      condition:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  item_service.UpdateItemResponse:
    properties:
      item:
        $ref: '#/definitions/item_service.Item'
    type: object
  item_service.UpdateSwapStatusRequest:
    properties:
      id:
        type: string
      reason:
        type: string
      status:
        type: string
    type: object
  item_service.UpdateSwapStatusResponse:
    properties:
      swap:
        $ref: '#/definitions/item_service.Swap'
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server for a restaurant reservation system.
  title: EcoSwap System API
  version: "1.0"
paths:
  /auth/eco-points:
    get:
      consumes:
      - application/json
      description: Get user eco points by ID.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication_service.EcoPointsResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get user eco points
      tags:
      - Authentication
    post:
      consumes:
      - application/json
      description: Add eco points to user by ID.
      parameters:
      - description: Add eco points request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authentication_service.AddEcoPointsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication_service.AddEcoPointsResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Add eco points to user
      tags:
      - Authentication
  /auth/eco-points/history:
    get:
      consumes:
      - application/json
      description: Get user eco points history by ID.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication_service.EcoPointsHistoryResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get user eco points history
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user with username and password.
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authentication_service.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication_service.LoginResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Login a user
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout a user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication_service.LogoutResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Logout a user
      tags:
      - Authentication
  /auth/profile:
    get:
      consumes:
      - application/json
      description: Get user profile by ID.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication_service.ProfileResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - Authentication
    put:
      consumes:
      - application/json
      description: Edit user profile by ID.
      parameters:
      - description: Edit profile request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authentication_service.EditProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication_service.EditProfileResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Edit user profile
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh token.
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authentication_service.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication_service.RefreshTokenResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Refresh token
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with username, password, and email.
      parameters:
      - description: Register request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authentication_service.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication_service.RegisterResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Register a new user
      tags:
      - Authentication
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password by email.
      parameters:
      - description: Reset password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authentication_service.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication_service.ResetPasswordResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Reset user password
      tags:
      - Authentication
  /auth/users:
    get:
      consumes:
      - application/json
      description: List all users.
      parameters:
      - description: List users request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authentication_service.UsersListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication_service.UsersListResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - Authentication
  /eco-challenges:
    post:
      consumes:
      - application/json
      description: Add a new eco challenge with details.
      parameters:
      - description: Add eco challenge request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/item_service.AddEcoChallengeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.AddEcoChallengeResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Add a new eco challenge
      tags:
      - EcoChallange
  /eco-challenges/participate:
    post:
      consumes:
      - application/json
      description: Participate in an eco challenge by user ID.
      parameters:
      - description: Participate eco challenge request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/item_service.ParticipateEcoChallengeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.ParticipateEcoChallengeResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Participate in an eco challenge
      tags:
      - EcoChallange
  /eco-challenges/progress:
    put:
      consumes:
      - application/json
      description: Update eco challenge progress by user ID.
      parameters:
      - description: Update eco challenge progress request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/item_service.UpdateEcoChallengeProgressRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.UpdateEcoChallengeProgressResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Update eco challenge progress
      tags:
      - EcoChallange
  /eco-tips:
    get:
      consumes:
      - application/json
      description: Get eco tips by user ID.
      parameters:
      - description: Get eco tips request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/item_service.GetEcoTipsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.GetEcoTipsResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get eco tips
      tags:
      - EcoTip
    post:
      consumes:
      - application/json
      description: Add a new eco tip with details.
      parameters:
      - description: Add eco tip request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/item_service.AddEcoTipRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.AddEcoTipResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Add a new eco tip
      tags:
      - EcoTip
  /item-categories:
    post:
      consumes:
      - application/json
      description: Add a new item category with details.
      parameters:
      - description: Add item category request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/item_service.AddItemCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.AddItemCategoryResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Add a new item category
      tags:
      - Item Category
  /items:
    delete:
      consumes:
      - application/json
      description: Delete an existing item by ID.
      parameters:
      - description: Delete item request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/item_service.DeleteItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.DeleteItemResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Delete an existing item
      tags:
      - Item
    get:
      consumes:
      - application/json
      description: Get all items with pagination and filtering.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.GetItemsResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get all items
      tags:
      - Item
    post:
      consumes:
      - application/json
      description: Create a new item with details.
      parameters:
      - description: Add item request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/item_service.AddItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.AddItemResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Create a new item
      tags:
      - Item
    put:
      consumes:
      - application/json
      description: Update an existing item with new details.
      parameters:
      - description: Item ID
        in: path
        name: itemId
        required: true
        type: string
      - description: Update item request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/item_service.UpdateItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.UpdateItemResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Update an existing item
      tags:
      - Item
  /items/search:
    get:
      consumes:
      - application/json
      description: Search items by keyword.
      parameters:
      - description: Search items request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/item_service.SearchItemsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.SearchItemsResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Search items
      tags:
      - Item
  /recycling-centers:
    get:
      consumes:
      - application/json
      description: Get all recycling centers with pagination and filtering.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.GetRecyclingCentersResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get all recycling centers
      tags:
      - recycling center
    post:
      consumes:
      - application/json
      description: Add a new recycling center with details.
      parameters:
      - description: Add recycling center request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/item_service.AddRecyclingCenterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.AddRecyclingCenterResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Add a new recycling center
      tags:
      - recycling center
  /recycling-submissions:
    post:
      consumes:
      - application/json
      description: Add a new recycling submission with details.
      parameters:
      - description: Add recycling submission request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/item_service.AddRecyclingSubmissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.AddRecyclingSubmissionResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Add a new recycling submission
      tags:
      - recycling center
  /statistics:
    get:
      consumes:
      - application/json
      description: Get statistics about items, swaps, and recycling centers.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.GetStatisticsResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get statistics
      tags:
      - Statistics
  /swaps:
    get:
      consumes:
      - application/json
      description: Get all swaps with pagination and filtering.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.GetSwapsResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get all swaps
      tags:
      - Swap
    post:
      consumes:
      - application/json
      description: Create a new swap with details.
      parameters:
      - description: Create swap request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/item_service.CreateSwapRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.CreateSwapResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Create a new swap
      tags:
      - Swap
    put:
      consumes:
      - application/json
      description: Update an existing swap with new details.
      parameters:
      - description: Swap ID
        in: path
        name: swapId
        required: true
        type: string
      - description: Update swap request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/item_service.UpdateSwapStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.UpdateSwapStatusResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Update an existing swap
      tags:
      - Swap
  /user-activity:
    get:
      consumes:
      - application/json
      description: Get user activity by user ID.
      parameters:
      - description: Get user activity request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/item_service.GetUserActivityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.GetUserActivityResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get user activity
      tags:
      - User Activity
  /user-ratings:
    get:
      consumes:
      - application/json
      description: Get user ratings by user ID.
      parameters:
      - description: Get user ratings request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/item_service.GetUserRatingsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.GetUserRatingsResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get user ratings
      tags:
      - User Rating
    post:
      consumes:
      - application/json
      description: Add a new user rating with details.
      parameters:
      - description: Add user rating request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/item_service.AddUserRatingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item_service.AddUserRatingResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Add a new user rating
      tags:
      - User Rating
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
